#!/usr/bin/env node

const { createRoadmapFromEnv, CcnError, getExitCode, formatJsonError, formatJsonSuccess, generateCorrelationId } = require('../dist/index');
const fs = require('fs');

const args = process.argv.slice(2);
const command = args[0];
const params = args.slice(1);

// Parse flags
const flags = {
  json: args.includes('--json'),
  dryRun: args.includes('--dry-run'),
  idempotent: args.includes('--idempotent'),
  debug: args.includes('--debug'),
  retries: parseInt(args.find(a => a.startsWith('--retries='))?.split('=')[1] || '3'),
  timeout: parseInt(args.find(a => a.startsWith('--timeout='))?.split('=')[1] || '15000')
};

// Generate correlation ID for this CLI invocation
const correlationId = generateCorrelationId();

// Setup enterprise options based on flags
const enterpriseOptions = {
  dryRun: flags.dryRun,
  idempotency: { enabled: flags.idempotent },
  retries: { attempts: flags.retries },
  timeout: { requestTimeoutMs: flags.timeout },
  correlationId,
  logger: flags.debug ? undefined : { 
    info: () => {}, 
    warn: () => {}, 
    error: () => {},
    event: () => {}
  }
};

// Output helper
function output(data, isError = false) {
  if (flags.json) {
    const formatted = isError ? formatJsonError(data, correlationId) : formatJsonSuccess(data, correlationId);
    console.log(JSON.stringify(formatted, null, 2));
  } else {
    if (isError) {
      console.error(`Error: ${data.message || data}`);
      if (flags.debug && data.metadata) {
        console.error('Debug info:', data.metadata);
      }
    } else {
      console.log(data);
    }
  }
}

// Error handler
function handleError(error) {
  const ccnError = error instanceof CcnError ? error : new CcnError({
    type: 'Unknown',
    message: error.message || String(error),
    retryable: false,
    correlationId
  });

  output(ccnError, true);
  
  if (!flags.json) {
    switch (ccnError.type) {
      case 'Auth':
        console.error('\\nPlease check your NOTION_API_KEY environment variable');
        break;
      case 'CircuitOpen':
        console.error('\\nService temporarily unavailable. Try again later or run "status" command');
        break;
      case 'Timeout':
        console.error(`\\nOperation timed out. Try increasing timeout with --timeout=${flags.timeout * 2}`);
        break;
      case 'RateLimit':
        console.error('\\nRate limit reached. Please wait before retrying');
        break;
    }
  }
  
  process.exit(getExitCode(ccnError));
}

// Commands
async function executeCommand() {
  try {
    if (!process.env.NOTION_API_KEY) {
      throw new CcnError({
        type: 'Validation',
        message: 'NOTION_API_KEY environment variable is required',
        retryable: false,
        correlationId
      });
    }

    if (!process.env.NOTION_DATABASE_ID) {
      throw new CcnError({
        type: 'Validation',
        message: 'NOTION_DATABASE_ID environment variable is required',
        retryable: false,
        correlationId
      });
    }

    const manager = createRoadmapFromEnv(process.env.NOTION_DATABASE_ID, enterpriseOptions);

    switch (command) {
      case 'complete': {
        const taskName = params[0];
        if (!taskName) {
          throw new CcnError({
            type: 'Validation',
            message: 'Task name is required',
            retryable: false,
            correlationId
          });
        }
        const result = await manager.complete(taskName);
        output(result);
        break;
      }

      case 'start': {
        const taskName = params[0];
        if (!taskName) {
          throw new CcnError({
            type: 'Validation',
            message: 'Task name is required',
            retryable: false,
            correlationId
          });
        }
        const result = await manager.start(taskName);
        output(result);
        break;
      }

      case 'update-status': {
        const [taskName, status] = params;
        if (!taskName || !status) {
          throw new CcnError({
            type: 'Validation',
            message: 'Task name and status are required',
            retryable: false,
            correlationId
          });
        }
        const result = await manager.updateTask(taskName, status);
        output(result);
        break;
      }

      case 'search': {
        const query = params[0];
        if (!query) {
          throw new CcnError({
            type: 'Validation',
            message: 'Search query is required',
            retryable: false,
            correlationId
          });
        }
        const results = await manager.search(query);
        output(results);
        break;
      }

      case 'list': {
        const results = await manager.list();
        output(results);
        break;
      }

      case 'status':
      case 'health': {
        const health = await manager.health();
        const circuit = manager.getCircuitStatus();
        output({ health, circuit });
        break;
      }

      case 'reset-circuit': {
        manager.resetCircuit();
        output({ message: 'Circuit breaker reset successfully' });
        break;
      }

      case 'batch': {
        const inputFile = params[0];
        if (!inputFile) {
          throw new CcnError({
            type: 'Validation',
            message: 'Input file is required for batch operations',
            retryable: false,
            correlationId
          });
        }
        
        const content = fs.readFileSync(inputFile, 'utf-8');
        const updates = content.split('\n')
          .filter(line => line.trim())
          .map(line => {
            const parsed = JSON.parse(line);
            return { taskIdentifier: parsed.task, status: parsed.status };
          });
        
        const result = await manager.batchUpdate(updates, {
          concurrency: 3,
          continueOnError: true
        });
        output(result);
        break;
      }

      case 'stats': {
        const stats = await manager.getStats();
        output(stats);
        break;
      }

      case 'export': {
        const format = params[0] || 'csv';
        if (format === 'csv') {
          const csv = await manager.exportCSV();
          if (flags.json) {
            output({ csv });
          } else {
            console.log(csv);
          }
        } else {
          const tasks = await manager.list();
          output(tasks);
        }
        break;
      }

      case 'statuses': {
        const statuses = await manager.getUniqueStatuses();
        output(statuses);
        break;
      }

      case 'help':
      default: {
        const helpText = `
Claude Code Notion CLI v2.0.1 - Enterprise-grade Notion database management

Usage: claude-code-notion <command> [options]

Commands:
  complete <task>           Mark task as completed
  start <task>              Mark task as in progress  
  update-status <task> <status>  Update task to any status
  search <query>            Search for tasks
  list                      List all tasks
  batch <file>              Batch update from newline-delimited JSON
  stats                     Get task statistics
  export [format]           Export tasks (csv or json)
  statuses                  List all unique statuses
  health                    Check service health and circuit status
  reset-circuit            Reset circuit breaker
  help                     Show this help message

Options:
  --json                   Output in JSON format
  --dry-run               Preview changes without writing
  --idempotent           Skip duplicate operations
  --debug                Show debug information
  --retries=N            Number of retry attempts (default: 3)
  --timeout=MS           Request timeout in milliseconds (default: 15000)

Environment Variables:
  NOTION_API_KEY          Your Notion API key (required)
  NOTION_DATABASE_ID      Your Notion database ID (required)
  NOTION_VERSION          Notion API version (default: 2022-06-28)
  APP_NAME                Application name for User-Agent
  CCN_WRITE_DISABLED      Force dry-run mode (set to 1)
  CCN_NETWORK_DISABLED    Disable all network operations (set to 1)
  CCN_CIRCUIT_BREAKER     Enable circuit breaker (default: true)
  CCN_IDEMPOTENCY        Enable idempotency (default: false)

Exit Codes:
  0 - Success
  1 - Generic error
  2 - Validation error
  3 - Authentication error
  4 - Rate limit error
  5 - Network error
  6 - Timeout error
  7 - Circuit open error
  8 - Not found error

Examples:
  # Mark task as completed with idempotency
  $ claude-code-notion complete "Deploy v2.0" --idempotent

  # Preview changes without writing
  $ claude-code-notion update-status "Security Audit" "In Review" --dry-run

  # Get JSON output for automation
  $ claude-code-notion search "API" --json

  # Check service health
  $ claude-code-notion health --json

Correlation ID for this session: ${correlationId}
`;
        console.log(helpText);
        process.exit(0);
      }
    }

    process.exit(0);
  } catch (error) {
    handleError(error);
  }
}

// Execute
executeCommand();